name: Bump Version and Tag Release

on:
  workflow_call:
    inputs:
      bump_type:
        description: 'Type of version bump (major, minor, patch)'
        required: true
        type: string
      package_manager:
        description: 'Package manager to use (npm, yarn, pnpm)'
        required: false
        type: string
        default: 'npm'
      working_directory:
        description: 'Working directory where package.json is located'
        required: false
        type: string
        default: '.'
      create_release:
        description: 'Whether to create a GitHub release'
        required: false
        type: boolean
        default: true
      release_notes:
        description: 'Custom release notes'
        required: false
        type: string
        default: ''
    outputs:
      new_version:
        description: 'The new version that was created'
        value: ${{ jobs.bump-version.outputs.new_version }}
      tag_name:
        description: 'The git tag that was created'
        value: ${{ jobs.bump-version.outputs.tag_name }}

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  bump-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      tag_name: ${{ steps.version.outputs.tag_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: ${{ inputs.package_manager }}
          cache-dependency-path: ${{ inputs.working_directory }}/package-lock.json

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Validate bump type
        run: |
          if [[ ! "${{ inputs.bump_type }}" =~ ^(major|minor|patch)$ ]]; then
            echo "Error: bump_type must be one of: major, minor, patch"
            exit 1
          fi

      - name: Get current version
        id: current_version
        working-directory: ${{ inputs.working_directory }}
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Bump version
        id: version
        working-directory: ${{ inputs.working_directory }}
        run: |
          case "${{ inputs.bump_type }}" in
            "major")
              NEW_VERSION=$(npm version major --no-git-tag-version)
              ;;
            "minor")
              NEW_VERSION=$(npm version minor --no-git-tag-version)
              ;;
            "patch")
              NEW_VERSION=$(npm version patch --no-git-tag-version)
              ;;
          esac

          NEW_VERSION=${NEW_VERSION#v}
          TAG_NAME="v$NEW_VERSION"

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Commit version bump
        working-directory: ${{ inputs.working_directory }}
        run: |
          git add package.json
          if [ -f package-lock.json ]; then
            git add package-lock.json
          fi
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }} (${{ inputs.bump_type }})"

      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          git tag ${{ steps.version.outputs.tag_name }}
          git push origin HEAD --tags

      - name: Generate release notes
        id: release_notes
        if: inputs.create_release
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md

          if [ -n "$LAST_TAG" ]; then
            echo "**Changes since [\`$LAST_TAG\`](https://github.com/${{ github.repository }}/releases/tag/$LAST_TAG):**" >> release_notes.md
            echo "" >> release_notes.md

            git log --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" $LAST_TAG..HEAD~1 >> release_notes.md
          else
            echo "**Changes in initial release:**" >> release_notes.md
            echo "" >> release_notes.md

            FIRST_COMMIT=$(git rev-list --max-parents=0 HEAD)
            git log --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" $FIRST_COMMIT..HEAD~1 >> release_notes.md
          fi

          if [ -n "${{ inputs.release_notes }}" ]; then
            echo "" >> release_notes.md
            echo "---" >> release_notes.md
            echo "## Additional Notes" >> release_notes.md
            echo "" >> release_notes.md
            echo "${{ inputs.release_notes }}" >> release_notes.md
          fi

          echo "" >> release_notes.md
          echo "---" >> release_notes.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...${{ steps.version.outputs.tag_name }}" >> release_notes.md

          {
            echo 'notes<<EOF'
            cat release_notes.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: inputs.create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          name: Release ${{ steps.version.outputs.tag_name }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: false

      - name: Summary
        run: |
          echo "## Version Bump Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version:** ${{ steps.current_version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version:** ${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bump Type:** ${{ inputs.bump_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag Created:** ${{ steps.version.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Created:** ${{ inputs.create_release }}" >> $GITHUB_STEP_SUMMARY
