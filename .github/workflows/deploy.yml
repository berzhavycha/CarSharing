name: Deploy Full-Stack App

on:
  push:
    branches:
      - main  
  workflow_dispatch: {}

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: client
        run: npm install

      - name: Build the frontend
        working-directory: client
        run: npm run build

      - name: Deploy to S3
        run: |
          aws s3 sync client/dist/ s3://${{ secrets.S3_BUCKET_NAME }} --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

  deploy-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install backend dependencies
        working-directory: server
        run: npm ci

      - name: Build the backend
        working-directory: server
        run: npm run build

      - name: Install production dependencies
        working-directory: server
        run: npm ci --only=production

      - name: Zip the deployment package
        run: |
          cd ../server
          zip -r -9 ../function.zip dist node_modules package.json
        working-directory: server

      - name: Deploy to AWS Lambda
        run: |
          aws lambda update-function-code --function-name nestjs-backend-api --zip-file fileb://function.zip --region ${{ secrets.AWS_REGION }}
          aws lambda update-function-configuration --function-name nestjs-backend-api --layers $(aws lambda list-layer-versions --layer-name nestjs-layer1 --query 'LayerVersions[0].LayerVersionArn' --output text) $(aws lambda list-layer-versions --layer-name nestjs-layer2 --query 'LayerVersions[0].LayerVersionArn' --output text) $(aws lambda list-layer-versions --layer-name nestjs-layer3 --query 'LayerVersions[0].LayerVersionArn' --output text) --region ${{ secrets.AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy API Gateway
        run: |
          aws apigateway create-deployment --rest-api-id ${{ secrets.API_GATEWAY_ID }} --stage-name ${{ secrets.API_GATEWAY_STAGE }} --region ${{ secrets.AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
